{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { darkState } from '@states/app';\nimport { gDebug } from '@utils/log';\n/**\n * Return an bool if app is in darkmode\n */\n\nexport const useDarkMode = () => {\n  const [currentVal] = useRecoilState(darkState);\n  const [dark, setDark] = useState(currentVal === \"dark\");\n\n  const darkListender = event => {\n    setDark(event.matches);\n  };\n\n  const darkRef = useRef();\n  useEffect(() => {\n    darkRef.current = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    switch (currentVal) {\n      case \"auto\":\n        {\n          darkRef.current.addEventListener(\"change\", darkListender);\n          setDark(darkRef.current.matches);\n          break;\n        }\n\n      default:\n        {\n          darkRef.current.removeEventListener(\"change\", darkListender);\n          setDark(currentVal === \"dark\");\n        }\n    }\n\n    gDebug.i(\"useDarkMode\", \"Global dark value\", currentVal.toString());\n  }, [currentVal]);\n  useEffect(() => {\n    gDebug.i(\"useDarkMode\", \"Current dark value\", dark.toString());\n  }, [dark]);\n  return dark;\n};","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/hooks/darkmode.ts"],"names":["useEffect","useRef","useState","useRecoilState","darkState","gDebug","useDarkMode","currentVal","dark","setDark","darkListender","event","matches","darkRef","current","window","matchMedia","addEventListener","removeEventListener","i","toString"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAM,CAACC,UAAD,IAAeJ,cAAc,CAACC,SAAD,CAAnC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACK,UAAU,KAAK,MAAhB,CAAhC;;AACA,QAAMG,aAAa,GAAIC,KAAD,IAAgC;AAClDF,IAAAA,OAAO,CAACE,KAAK,CAACC,OAAP,CAAP;AACH,GAFD;;AAGA,QAAMC,OAAO,GAAGZ,MAAM,EAAtB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,OAAR,GAAkBC,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAlB;;AACA,YAAQT,UAAR;AACI,WAAK,MAAL;AAAa;AACTM,UAAAA,OAAO,CAACC,OAAR,CAAgBG,gBAAhB,CAAiC,QAAjC,EAA2CP,aAA3C;AACAD,UAAAA,OAAO,CAACI,OAAO,CAACC,OAAR,CAAgBF,OAAjB,CAAP;AACA;AACH;;AACD;AAAS;AACLC,UAAAA,OAAO,CAACC,OAAR,CAAgBI,mBAAhB,CAAoC,QAApC,EAA8CR,aAA9C;AACAD,UAAAA,OAAO,CAACF,UAAU,KAAK,MAAhB,CAAP;AACH;AATL;;AAWAF,IAAAA,MAAM,CAACc,CAAP,CAAS,aAAT,EAAwB,mBAAxB,EAA6CZ,UAAU,CAACa,QAAX,EAA7C;AACH,GAdQ,EAcN,CAACb,UAAD,CAdM,CAAT;AAeAP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAACc,CAAP,CAAS,aAAT,EAAwB,oBAAxB,EAA8CX,IAAI,CAACY,QAAL,EAA9C;AACH,GAFQ,EAEN,CAACZ,IAAD,CAFM,CAAT;AAGA,SAAOA,IAAP;AACH,CA1BM","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { darkState } from '@states/app';\nimport { gDebug } from '@utils/log';\n\n/**\n * Return an bool if app is in darkmode\n */\nexport const useDarkMode = () => {\n    const [currentVal] = useRecoilState(darkState);\n    const [dark, setDark] = useState(currentVal === \"dark\");\n    const darkListender = (event: MediaQueryListEvent) => {\n        setDark(event.matches);\n    };\n    const darkRef = useRef<MediaQueryList>();\n    useEffect(() => {\n        darkRef.current = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        switch (currentVal) {\n            case \"auto\": {\n                darkRef.current.addEventListener(\"change\", darkListender);\n                setDark(darkRef.current.matches);\n                break;\n            }\n            default: {\n                darkRef.current.removeEventListener(\"change\", darkListender);\n                setDark(currentVal === \"dark\");\n            }\n        }\n        gDebug.i(\"useDarkMode\", \"Global dark value\", currentVal.toString());\n    }, [currentVal]);\n    useEffect(() => {\n        gDebug.i(\"useDarkMode\", \"Current dark value\", dark.toString());\n    }, [dark]);\n    return dark;\n};\n"]},"metadata":{},"sourceType":"module"}