{"ast":null,"code":"import { APP_ANALYTICS, APP_CRASHLYTICS, APP_DEBUG } from '@config';\nimport { delay } from './tools';\n\n/**\n * Debug class for application\n */\nexport class Debug {\n  /**\n   * Name of class that this debug belong to\n   */\n  constructor(name) {\n    this.name = void 0;\n    this.name = name;\n  }\n  /**\n   * Log an info into terminal or to file\n   * @param opts Log info that need to print out\n   * @param alert Should alert this in different color?\n   */\n\n\n  Print(opts, alert = false) {\n    this.collectAnalytic(opts.name, opts.mess, opts.data);\n\n    if (APP_DEBUG) {\n      console[alert ? \"warn\" : \"log\"](`<${opts.icon} #${this.name}>`, opts.name, \":\", opts.mess, opts.data || typeof opts.data === \"number\" ? \"==>\" : \"\", opts.data || typeof opts.data === \"number\" ? opts.data : \"\");\n    } else {\n      // Collect crash only on product mode\n      if (APP_CRASHLYTICS.enabled && opts.icon === \"bug!\") {// Found bug => send to crashlytics\n        // crashlytics().recordError(\n        //     new Error(\n        //         JSON.stringify({\n        //             className: this.name,\n        //             functName: opts.name,\n        //             message: opts.mess,\n        //             data: opts.data,\n        //         }),\n        //     ),\n        // );\n      }\n    }\n  }\n  /**\n   * Send an analytic to google firebase\n   * @param _type Type of event\n   * @param _name Name of event\n   * @param _data Data that send to analytic\n   */\n\n\n  async sendAnalyticEvent(_type, _name, _data = {}) {\n    if (APP_ANALYTICS.enabled) {\n      // await analytics().logEvent(name, {\n      //     type: type,\n      //     value: data,\n      // });\n      await delay(10);\n    }\n  }\n  /**\n   * Collect data from and log and send to analytic\n   * @param functName Name of funtion which is logging\n   * @param functLog Log from function\n   * @param functData Data from function\n   */\n\n\n  async collectAnalytic(functName, functLog, functData) {\n    if (APP_ANALYTICS.keyword.class.indexOf(this.name) !== -1) {\n      return this.sendAnalyticEvent(\"info\", this.name, {\n        name: functName,\n        log: functLog,\n        data: functData\n      });\n    }\n\n    for (const filter of APP_ANALYTICS.keyword.funct) {\n      if (functName.includes(filter)) {\n        return this.sendAnalyticEvent(\"info\", functName, {\n          log: functLog,\n          data: functData\n        });\n      }\n    }\n\n    for (const filter of APP_ANALYTICS.keyword.mess) {\n      if (functLog.includes(filter)) {\n        return this.sendAnalyticEvent(\"info\", filter, {\n          log: functLog,\n          data: functData\n        });\n      }\n    }\n\n    if (typeof functData === \"object\") {\n      const dataKeys = Object.keys(functData);\n\n      for (const filter of APP_ANALYTICS.keyword.dataKeys) {\n        if (dataKeys.indexOf(filter) !== -1) {\n          return this.sendAnalyticEvent(\"info\", filter, {\n            log: functName,\n            data: functData[filter]\n          });\n        }\n      }\n    }\n  }\n  /**\n   * Log an bug to console\n   * @param name Name of function that call this log\n   * @param mess Message for this log\n   * @param data Data will be logged\n   */\n\n\n  b(functName, mess, data) {\n    this.Print({\n      icon: \"bug!\",\n      name: functName,\n      mess,\n      data\n    }, true);\n  }\n  /**\n   * Log warning to console\n   * @param name Name of function that call this log\n   * @param mess Message for this log\n   * @param data Data will be logged\n   */\n\n\n  w(functName, mess, data) {\n    this.Print({\n      icon: \"warn\",\n      name: functName,\n      mess,\n      data\n    }, true);\n  }\n  /**\n   * Log info to console\n   * @param name Name of function that call this log\n   * @param mess Message for this log\n   * @param data Data will be logged\n   */\n\n\n  i(functName, mess, data) {\n    this.Print({\n      icon: \"info\",\n      name: functName,\n      mess,\n      data\n    });\n  }\n  /**\n   * Log prossing job to console\n   * @param name Name of function that call this log\n   * @param mess Message for this log\n   * @param data Data will be logged\n   */\n\n\n  p(functName, mess, data) {\n    this.Print({\n      icon: \"doin\",\n      name: functName,\n      mess,\n      data\n    });\n  }\n\n}\n/**\n * Global debug\n */\n\nexport const gDebug = new Debug(\"global\");","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/utils/log.ts"],"names":["APP_ANALYTICS","APP_CRASHLYTICS","APP_DEBUG","delay","Debug","constructor","name","Print","opts","alert","collectAnalytic","mess","data","console","icon","enabled","sendAnalyticEvent","_type","_name","_data","functName","functLog","functData","keyword","class","indexOf","log","filter","funct","includes","dataKeys","Object","keys","b","w","i","p","gDebug"],"mappings":"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","sourcesContent":["import { APP_ANALYTICS, APP_CRASHLYTICS, APP_DEBUG } from '@config';\n\nimport { delay } from './tools';\n\nexport type DebugStatus = \"bug!\" | \"warn\" | \"info\" | \"doin\";\n\n/**\n * Debug class for application\n */\nexport class Debug {\n    /**\n     * Name of class that this debug belong to\n     */\n    name: string;\n    constructor (name: string) {\n        this.name = name;\n    }\n\n    /**\n     * Log an info into terminal or to file\n     * @param opts Log info that need to print out\n     * @param alert Should alert this in different color?\n     */\n    Print (opts: { icon: DebugStatus; name: string; mess: string; data?: any }, alert: boolean = false) {\n        this.collectAnalytic(opts.name, opts.mess, opts.data);\n        if (APP_DEBUG) {\n            console[alert ? \"warn\" : \"log\"](\n                `<${opts.icon} #${this.name}>`,\n                opts.name,\n                \":\",\n                opts.mess,\n                opts.data || typeof opts.data === \"number\" ? \"==>\" : \"\",\n                opts.data || typeof opts.data === \"number\" ? opts.data : \"\",\n            );\n        } else {\n            // Collect crash only on product mode\n            if (APP_CRASHLYTICS.enabled && opts.icon === \"bug!\") {\n                // Found bug => send to crashlytics\n                // crashlytics().recordError(\n                //     new Error(\n                //         JSON.stringify({\n                //             className: this.name,\n                //             functName: opts.name,\n                //             message: opts.mess,\n                //             data: opts.data,\n                //         }),\n                //     ),\n                // );\n            }\n        }\n    }\n\n    /**\n     * Send an analytic to google firebase\n     * @param _type Type of event\n     * @param _name Name of event\n     * @param _data Data that send to analytic\n     */\n    async sendAnalyticEvent (_type: DebugStatus, _name: string, _data: any = {}) {\n        if (APP_ANALYTICS.enabled) {\n            // await analytics().logEvent(name, {\n            //     type: type,\n            //     value: data,\n            // });\n            await delay(10);\n        }\n    }\n\n    /**\n     * Collect data from and log and send to analytic\n     * @param functName Name of funtion which is logging\n     * @param functLog Log from function\n     * @param functData Data from function\n     */\n    async collectAnalytic (functName: string, functLog: string, functData?: any) {\n        if (APP_ANALYTICS.keyword.class.indexOf(this.name) !== -1) {\n            return this.sendAnalyticEvent(\"info\", this.name, { name: functName, log: functLog, data: functData });\n        }\n        for (const filter of APP_ANALYTICS.keyword.funct) {\n            if (functName.includes(filter)) {\n                return this.sendAnalyticEvent(\"info\", functName, {\n                    log: functLog,\n                    data: functData,\n                });\n            }\n        }\n        for (const filter of APP_ANALYTICS.keyword.mess) {\n            if (functLog.includes(filter)) {\n                return this.sendAnalyticEvent(\"info\", filter, {\n                    log: functLog,\n                    data: functData,\n                });\n            }\n        }\n        if (typeof functData === \"object\") {\n            const dataKeys = Object.keys(functData);\n            for (const filter of APP_ANALYTICS.keyword.dataKeys) {\n                if (dataKeys.indexOf(filter) !== -1) {\n                    return this.sendAnalyticEvent(\"info\", filter, {\n                        log: functName,\n                        data: functData[filter],\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Log an bug to console\n     * @param name Name of function that call this log\n     * @param mess Message for this log\n     * @param data Data will be logged\n     */\n    b (functName: string, mess: string, data?: any) {\n        this.Print({ icon: \"bug!\", name: functName, mess, data }, true);\n    }\n    /**\n     * Log warning to console\n     * @param name Name of function that call this log\n     * @param mess Message for this log\n     * @param data Data will be logged\n     */\n    w (functName: string, mess: string, data?: any) {\n        this.Print({ icon: \"warn\", name: functName, mess, data }, true);\n    }\n    /**\n     * Log info to console\n     * @param name Name of function that call this log\n     * @param mess Message for this log\n     * @param data Data will be logged\n     */\n    i (functName: string, mess: string, data?: any) {\n        this.Print({ icon: \"info\", name: functName, mess, data });\n    }\n    /**\n     * Log prossing job to console\n     * @param name Name of function that call this log\n     * @param mess Message for this log\n     * @param data Data will be logged\n     */\n    p (functName: string, mess: string, data?: any) {\n        this.Print({ icon: \"doin\", name: functName, mess, data });\n    }\n}\n\n/**\n * Global debug\n */\nexport const gDebug = new Debug(\"global\");\n"]},"metadata":{},"sourceType":"module"}