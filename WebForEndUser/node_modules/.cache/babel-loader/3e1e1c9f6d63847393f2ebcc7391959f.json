{"ast":null,"code":"import { APP_CONF_STORAGE_KEY } from '@config';\n/**\n * Get current app config from localStorage\n */\n\nexport function getAppConfigs() {\n  try {\n    return JSON.parse(localStorage.getItem(APP_CONF_STORAGE_KEY) || \"{}\");\n  } catch (e) {\n    console.warn(\"Getting config err, bring back to default state\", e);\n    saveAppConfigs({});\n    return {};\n  }\n}\n/**\n * Save config to localStorage and encode it\n * @param conf Current config of app\n */\n\nexport function saveAppConfigs(conf) {\n  try {\n    localStorage.setItem(APP_CONF_STORAGE_KEY, JSON.stringify(conf));\n    return true;\n  } catch (e) {\n    console.warn(\"Saving app conf err\", e);\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/utils/storage.ts"],"names":["APP_CONF_STORAGE_KEY","getAppConfigs","JSON","parse","localStorage","getItem","e","console","warn","saveAppConfigs","conf","setItem","stringify"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,SAArC;AAEA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,GAAsC;AACzC,MAAI;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBL,oBAArB,KAA8C,IAAzD,CAAP;AACH,GAFD,CAEE,OAAOM,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,IAAR,CAAa,iDAAb,EAAgEF,CAAhE;AACAG,IAAAA,cAAc,CAAC,EAAD,CAAd;AACA,WAAO,EAAP;AACH;AACJ;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASA,cAAT,CAAyBC,IAAzB,EAA2C;AAC9C,MAAI;AACAN,IAAAA,YAAY,CAACO,OAAb,CAAqBX,oBAArB,EAA2CE,IAAI,CAACU,SAAL,CAAeF,IAAf,CAA3C;AACA,WAAO,IAAP;AACH,GAHD,CAGE,OAAOJ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,IAAR,CAAa,qBAAb,EAAoCF,CAApC;AACA,WAAO,KAAP;AACH;AACJ","sourcesContent":["import { APP_CONF_STORAGE_KEY } from '@config';\n\n/**\n * Get current app config from localStorage\n */\nexport function getAppConfigs (): IAppConfig {\n    try {\n        return JSON.parse(localStorage.getItem(APP_CONF_STORAGE_KEY) || \"{}\");\n    } catch (e) {\n        console.warn(\"Getting config err, bring back to default state\", e);\n        saveAppConfigs({});\n        return {};\n    }\n}\n\n/**\n * Save config to localStorage and encode it\n * @param conf Current config of app\n */\nexport function saveAppConfigs (conf: IAppConfig) {\n    try {\n        localStorage.setItem(APP_CONF_STORAGE_KEY, JSON.stringify(conf));\n        return true;\n    } catch (e) {\n        console.warn(\"Saving app conf err\", e);\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}