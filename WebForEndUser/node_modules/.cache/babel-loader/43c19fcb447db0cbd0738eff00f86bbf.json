{"ast":null,"code":"import { useTranslation } from 'react-i18next';\n// e.g. via const dict = {...}; export type MyTranslations = typeof dict\n// import this hook in other modules instead of i18next useTranslation\nexport function useTypedTranslation() {\n  const {\n    t\n  } = useTranslation(); // implementation goes here: join keys by dot (depends on your config)\n  // and delegate to lib t\n\n  return {\n    t(...keys) {\n      return t(keys.join(\".\"));\n    },\n\n    bind(bind, ...keys) {\n      return t(keys.join(\".\"), bind);\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/languages/typedTranslation.ts"],"names":["useTranslation","useTypedTranslation","t","keys","join","bind"],"mappings":"AAAA,SAASA,cAAT,QAA+B,eAA/B;AA2BA;AAEA;AACA,OAAO,SAASC,mBAAT,GAA2G;AAC9G,QAAM;AAAEC,IAAAA;AAAF,MAAQF,cAAc,EAA5B,CAD8G,CAE9G;AACA;;AACA,SAAO;AACHE,IAAAA,CAAC,CAAE,GAAGC,IAAL,EAAqB;AAClB,aAAOD,CAAC,CAACC,IAAI,CAACC,IAAL,CAAU,GAAV,CAAD,CAAR;AACH,KAHE;;AAIHC,IAAAA,IAAI,CAAEA,IAAF,EAAmC,GAAGF,IAAtC,EAAsD;AACtD,aAAOD,CAAC,CAACC,IAAI,CAACC,IAAL,CAAU,GAAV,CAAD,EAAiBC,IAAjB,CAAR;AACH;;AANE,GAAP;AAQH","sourcesContent":["import { useTranslation } from 'react-i18next';\n\nimport dict from './vi';\n\ntype Dictionary = string | DictionaryObject;\ntype DictionaryObject = { [K: string]: Dictionary };\n\ninterface TypedTFunction<D extends Dictionary> {\n    <K extends keyof D>(args: K): D[K];\n    <K extends keyof D, K1 extends keyof D[K]>(...args: [K, K1]): D[K][K1];\n    <K extends keyof D, K1 extends keyof D[K], K2 extends keyof D[K][K1]>(...args: [K, K1, K2]): D[K][K1][K2];\n    // ... up to a reasonable key parameters length of your choice ...\n}\n\ninterface TypedBindTFunction<D extends Dictionary> {\n    <K extends keyof D>(bind: { [key: string]: string }, args: K): D[K];\n    <K extends keyof D, K1 extends keyof D[K]>(bind: { [key: string]: string }, ...args: [K, K1]): D[K][K1];\n    <K extends keyof D, K1 extends keyof D[K], K2 extends keyof D[K][K1]>(\n        bind: { [key: string]: string },\n        ...args: [K, K1, K2]\n    ): D[K][K1][K2];\n    // ... up to a reasonable key parameters length of your choice ...\n}\n\ntype MyTranslations = {\n    /* your concrete type*/\n};\n// e.g. via const dict = {...}; export type MyTranslations = typeof dict\n\n// import this hook in other modules instead of i18next useTranslation\nexport function useTypedTranslation (): { t: TypedTFunction<typeof dict>; bind: TypedBindTFunction<typeof dict> } {\n    const { t } = useTranslation();\n    // implementation goes here: join keys by dot (depends on your config)\n    // and delegate to lib t\n    return {\n        t (...keys: string[]) {\n            return t(keys.join(\".\"));\n        },\n        bind (bind: { [key: string]: string }, ...keys: string[]) {\n            return t(keys.join(\".\"), bind);\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}