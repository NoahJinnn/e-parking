{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n/**\n * Make dynamic value base on client screen status\n */\n\nexport const useDynamicSelectValue = (breakPoints = [960, 480]) => {\n  const [sel, setSel] = useState(0);\n  const handleResize = useCallback(() => {\n    if (window.innerWidth > breakPoints[0]) {\n      setSel(2);\n    } else if (window.innerWidth <= breakPoints[0] && window.innerWidth > breakPoints[1]) {\n      setSel(1);\n    } else {\n      setSel(0);\n    }\n  }, [breakPoints]);\n  useEffect(() => {\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [handleResize]);\n  /**\n   * Return size base on screen status\n   * @param values [small,medium,large] dynamic size to be used\n   */\n\n  const getValue = values => {\n    return values[sel];\n  };\n\n  return getValue;\n};","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/hooks/dynamicValues.ts"],"names":["useCallback","useEffect","useState","useDynamicSelectValue","breakPoints","sel","setSel","handleResize","window","innerWidth","addEventListener","removeEventListener","getValue","values"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,CAAf,KAA8B;AAC/D,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBJ,QAAQ,CAAC,CAAD,CAA9B;AAEA,QAAMK,YAAY,GAAGP,WAAW,CAAC,MAAM;AACnC,QAAIQ,MAAM,CAACC,UAAP,GAAoBL,WAAW,CAAC,CAAD,CAAnC,EAAwC;AACpCE,MAAAA,MAAM,CAAC,CAAD,CAAN;AACH,KAFD,MAEO,IAAIE,MAAM,CAACC,UAAP,IAAqBL,WAAW,CAAC,CAAD,CAAhC,IAAuCI,MAAM,CAACC,UAAP,GAAoBL,WAAW,CAAC,CAAD,CAA1E,EAA+E;AAClFE,MAAAA,MAAM,CAAC,CAAD,CAAN;AACH,KAFM,MAEA;AACHA,MAAAA,MAAM,CAAC,CAAD,CAAN;AACH;AACJ,GAR+B,EAQ7B,CAACF,WAAD,CAR6B,CAAhC;AAUAH,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,YAAY;AACZC,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACA,WAAO,MAAMC,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAb;AACH,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMA;AACJ;AACA;AACA;;AACI,QAAMK,QAAQ,GAAIC,MAAD,IAAsC;AACnD,WAAOA,MAAM,CAACR,GAAD,CAAb;AACH,GAFD;;AAGA,SAAOO,QAAP;AACH,CA3BM","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Make dynamic value base on client screen status\n */\nexport const useDynamicSelectValue = (breakPoints = [960, 480]) => {\n    const [sel, setSel] = useState(0);\n\n    const handleResize = useCallback(() => {\n        if (window.innerWidth > breakPoints[0]) {\n            setSel(2);\n        } else if (window.innerWidth <= breakPoints[0] && window.innerWidth > breakPoints[1]) {\n            setSel(1);\n        } else {\n            setSel(0);\n        }\n    }, [breakPoints]);\n\n    useEffect(() => {\n        handleResize();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [handleResize]);\n\n    /**\n     * Return size base on screen status\n     * @param values [small,medium,large] dynamic size to be used\n     */\n    const getValue = (values: [number, number, number]) => {\n        return values[sel];\n    };\n    return getValue;\n};\n"]},"metadata":{},"sourceType":"module"}