{"ast":null,"code":"var _jsxFileName = \"/home/nguyen/workspace/projects/eparking/WebForEndUser/src/pages/map/index.tsx\";\nimport './index.scss';\nimport GoogleMapReact from 'google-map-react';\nimport React, { useState } from 'react';\nimport { findUnits } from '@apis/map';\nimport MapDarkConf from '@assets/map/dark.json';\nimport MapStandardConf from '@assets/map/standard.json';\nimport { UnitMarker } from '@components/mapMarker';\nimport { MapSearchBar } from '@components/mapSearchBar';\nimport { MapUnitInfo } from '@components/mapUnitInfo';\nimport { MAP_KEY } from '@config';\nimport { useDarkMode } from '@hooks/darkmode';\nimport { useMarkersHook } from '@hooks/mapMakers';\nimport { useDidMount } from '@hooks/utils';\nimport { Debug } from '@utils/log';\nexport const MapScreen = () => {\n  let centerPosstion = {\n    lng: 106.720719,\n    lat: 10.798331\n  };\n  const [selectedMark, setSelectedMark] = useState();\n  const [markers, addMarkers] = useMarkersHook();\n  const [center, setCenter] = useState(centerPosstion);\n  const dark = useDarkMode();\n  const debug = new Debug(\"Map page\");\n  useDidMount(async () => {\n    const queryMarkers = await findUnits(center.lat, center.lng, 4000);\n    addMarkers(queryMarkers.data);\n  });\n\n  const getStatus = (curr, max) => {\n    const availPer = curr / max;\n    if (availPer === 0) return \"unavailable\";\n    if (availPer < 0.4) return \"nearfull\";\n    return \"available\";\n  };\n\n  const onMapEvent = event => {\n    const out = Math.sqrt(Math.pow(event.center.lat - centerPosstion.lat, 2) + Math.pow(event.center.lng - centerPosstion.lng, 2)) * 100;\n    debug.i(\"onMapEvent\", \"Output distances\", out);\n\n    if (out > 10) {\n      centerPosstion = { ...event.center\n      };\n      findUnits(centerPosstion.lat, centerPosstion.lng, 3000).then(queryMarkers => {\n        addMarkers(queryMarkers.data);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex h-100 w-100 relative map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex\",\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    defaultZoom: 16,\n    defaultCenter: centerPosstion,\n    center: center,\n    options: {\n      styles: dark ? MapDarkConf : MapStandardConf\n    },\n    onChange: onMapEvent,\n    bootstrapURLKeys: {\n      key: MAP_KEY\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, markers.map((info, idx) => /*#__PURE__*/React.createElement(UnitMarker, {\n    onClick: () => {\n      setCenter({\n        lat: info.latitude,\n        lng: info.longitude\n      });\n      setSelectedMark(info);\n    },\n    active: (selectedMark === null || selectedMark === void 0 ? void 0 : selectedMark.rangeKey) === info.rangeKey,\n    key: idx,\n    lat: info.latitude,\n    lng: info.longitude,\n    status: getStatus(info.available_cabin, info.total_cabin),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(MapSearchBar, {\n    onItemPress: info => {\n      setCenter({\n        lat: info.latitude,\n        lng: info.longitude\n      });\n      setSelectedMark(info);\n    },\n    showUnits: markers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, selectedMark && /*#__PURE__*/React.createElement(MapUnitInfo, {\n    unitMarker: selectedMark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 38\n    }\n  }))));\n};","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/pages/map/index.tsx"],"names":["GoogleMapReact","React","useState","findUnits","MapDarkConf","MapStandardConf","UnitMarker","MapSearchBar","MapUnitInfo","MAP_KEY","useDarkMode","useMarkersHook","useDidMount","Debug","MapScreen","centerPosstion","lng","lat","selectedMark","setSelectedMark","markers","addMarkers","center","setCenter","dark","debug","queryMarkers","data","getStatus","curr","max","availPer","onMapEvent","event","out","Math","sqrt","pow","i","then","height","width","styles","key","map","info","idx","latitude","longitude","rangeKey","available_cabin","total_cabin"],"mappings":"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","sourcesContent":["import './index.scss';\n\nimport GoogleMapReact, { ChangeEventValue } from 'google-map-react';\nimport React, { useState } from 'react';\n\nimport { findUnits } from '@apis/map';\nimport MapDarkConf from '@assets/map/dark.json';\nimport MapStandardConf from '@assets/map/standard.json';\nimport { UnitMarker } from '@components/mapMarker';\nimport { MapSearchBar } from '@components/mapSearchBar';\nimport { MapUnitInfo } from '@components/mapUnitInfo';\nimport { MAP_KEY } from '@config';\nimport { useDarkMode } from '@hooks/darkmode';\nimport { useMarkersHook } from '@hooks/mapMakers';\nimport { useDidMount } from '@hooks/utils';\nimport { Debug } from '@utils/log';\n\nexport const MapScreen = () => {\n    let centerPosstion: IGeoLocationShort = { lng: 106.720719, lat: 10.798331 };\n    const [selectedMark, setSelectedMark] = useState<IMarker>();\n    const [markers, addMarkers] = useMarkersHook();\n    const [center, setCenter] = useState<IGeoLocationShort>(centerPosstion);\n    const dark = useDarkMode();\n    const debug = new Debug(\"Map page\");\n\n    useDidMount(async () => {\n        const queryMarkers = await findUnits(center.lat, center.lng, 4000);\n        addMarkers(queryMarkers.data);\n    });\n\n    const getStatus = (curr: number, max: number) => {\n        const availPer = curr / max;\n        if (availPer === 0) return \"unavailable\";\n        if (availPer < 0.4) return \"nearfull\";\n        return \"available\";\n    };\n\n    const onMapEvent = (event: ChangeEventValue) => {\n        const out =\n            Math.sqrt(Math.pow(event.center.lat - centerPosstion.lat, 2) + Math.pow(event.center.lng - centerPosstion.lng, 2)) * 100;\n        debug.i(\"onMapEvent\", \"Output distances\", out);\n        if (out > 10) {\n            centerPosstion = { ...event.center };\n            findUnits(centerPosstion.lat, centerPosstion.lng, 3000).then((queryMarkers) => {\n                addMarkers(queryMarkers.data);\n            });\n        }\n    };\n\n    return (\n        <div className=\"flex h-100 w-100 relative map\">\n            {/* <div className=\"w-30 pa4 bg-white br4 shadow\" style={{ height: 20 }}></div> */}\n            <div className=\"flex\" style={{ height: \"100vh\", width: \"100%\" }}>\n                <GoogleMapReact\n                    defaultZoom={16}\n                    defaultCenter={centerPosstion}\n                    center={center}\n                    options={{ styles: dark ? MapDarkConf : MapStandardConf }}\n                    onChange={onMapEvent}\n                    bootstrapURLKeys={{ key: MAP_KEY }}>\n                    {markers.map((info, idx) => (\n                        <UnitMarker\n                            onClick={() => {\n                                setCenter({ lat: info.latitude, lng: info.longitude });\n                                setSelectedMark(info);\n                            }}\n                            active={selectedMark?.rangeKey === info.rangeKey}\n                            key={idx}\n                            lat={info.latitude}\n                            lng={info.longitude}\n                            status={getStatus(info.available_cabin, info.total_cabin)}\n                        />\n                    ))}\n                </GoogleMapReact>\n                <MapSearchBar\n                    onItemPress={(info) => {\n                        setCenter({ lat: info.latitude, lng: info.longitude });\n                        setSelectedMark(info);\n                    }}\n                    showUnits={markers}>\n                    {selectedMark && <MapUnitInfo unitMarker={selectedMark} />}\n                </MapSearchBar>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}