{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appLoaded, darkState } from '@states/app';\nimport { getAppConfigs, saveAppConfigs } from '@utils/storage';\n/**\n * Components manager the app, handle changes of state\n */\n\nexport const Manager = ({\n  children\n}) => {\n  // TODO: Handle background process here\n  const appConf = getAppConfigs();\n  const [, setLoaded] = useRecoilState(appLoaded);\n  const [, setDark] = useRecoilState(darkState);\n\n  const appLoader = () => {\n    // TODO: Prepare data of app here\n    setDark(appConf.dark || \"auto\");\n    setLoaded(true); // setLoadState(true);\n\n    setInterval(() => {// Handle task each 10s\n    }, 10000);\n    setInterval(() => {// Handle task each 30s\n    }, 30000);\n    setInterval(() => {// Handle task each 60s\n    }, 60000);\n  };\n\n  useEffect(appLoader, [appLoader]);\n  /**\n   * Using useEffect to catch recoil state changes and handle it logic!\n   */\n\n  useEffect(() => {\n    // TODO: Catch changed of state an handle it\n    saveAppConfigs(appConf);\n    return () => {};\n  }, [appConf]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/manager.tsx"],"names":["React","useEffect","useRecoilState","appLoaded","darkState","getAppConfigs","saveAppConfigs","Manager","children","appConf","setLoaded","setDark","appLoader","dark","setInterval"],"mappings":"AAAA,OAAOA,KAAP,IAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,aAArC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,gBAA9C;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,OAAwC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtE;AACA,QAAMC,OAAO,GAAGJ,aAAa,EAA7B;AACA,QAAM,GAAGK,SAAH,IAAgBR,cAAc,CAACC,SAAD,CAApC;AACA,QAAM,GAAGQ,OAAH,IAAcT,cAAc,CAACE,SAAD,CAAlC;;AACA,QAAMQ,SAAS,GAAG,MAAM;AACpB;AACAD,IAAAA,OAAO,CAACF,OAAO,CAACI,IAAR,IAAgB,MAAjB,CAAP;AACAH,IAAAA,SAAS,CAAC,IAAD,CAAT,CAHoB,CAIpB;;AACAI,IAAAA,WAAW,CAAC,MAAM,CACd;AACH,KAFU,EAER,KAFQ,CAAX;AAGAA,IAAAA,WAAW,CAAC,MAAM,CACd;AACH,KAFU,EAER,KAFQ,CAAX;AAGAA,IAAAA,WAAW,CAAC,MAAM,CACd;AACH,KAFU,EAER,KAFQ,CAAX;AAGH,GAdD;;AAeAb,EAAAA,SAAS,CAACW,SAAD,EAAY,CAACA,SAAD,CAAZ,CAAT;AACA;AACJ;AACA;;AACIX,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAK,IAAAA,cAAc,CAACG,OAAD,CAAd;AACA,WAAO,MAAM,CAAE,CAAf;AACH,GAJQ,EAIN,CAACA,OAAD,CAJM,CAAT;AAKA,sBAAO,0CAAGD,QAAH,CAAP;AACH,CA9BM","sourcesContent":["import React, { PropsWithChildren, useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { appLoaded, darkState } from '@states/app';\nimport { getAppConfigs, saveAppConfigs } from '@utils/storage';\n\n/**\n * Components manager the app, handle changes of state\n */\nexport const Manager: React.FC<PropsWithChildren<{}>> = ({ children }) => {\n    // TODO: Handle background process here\n    const appConf = getAppConfigs();\n    const [, setLoaded] = useRecoilState(appLoaded);\n    const [, setDark] = useRecoilState(darkState);\n    const appLoader = () => {\n        // TODO: Prepare data of app here\n        setDark(appConf.dark || \"auto\");\n        setLoaded(true);\n        // setLoadState(true);\n        setInterval(() => {\n            // Handle task each 10s\n        }, 10000);\n        setInterval(() => {\n            // Handle task each 30s\n        }, 30000);\n        setInterval(() => {\n            // Handle task each 60s\n        }, 60000);\n    };\n    useEffect(appLoader, [appLoader]);\n    /**\n     * Using useEffect to catch recoil state changes and handle it logic!\n     */\n    useEffect(() => {\n        // TODO: Catch changed of state an handle it\n        saveAppConfigs(appConf);\n        return () => {};\n    }, [appConf]);\n    return <>{children}</>;\n};\n"]},"metadata":{},"sourceType":"module"}