{"ast":null,"code":"/**\n * Delay current async function by given time\n * @param ms Delay time in microseconds\n */\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Create an promise with timeout\n * @param ms Timeout in millisecond\n * @param promise\n */\n\nexport const timeoutPromise = (ms, promise) => new Promise((resolve, reject) => {\n  const timeoutId = setTimeout(() => {\n    reject(new Error(\"API timeout\"));\n  }, ms);\n  promise.then(res => {\n    clearTimeout(timeoutId);\n    resolve(res);\n  }, err => {\n    clearTimeout(timeoutId);\n    reject(err);\n  });\n});\n/**\n * Get formated time for app clock\n */\n\nexport function getFormatTime(date = new Date()) {\n  return `${date.getHours()}:${date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()}`;\n}","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/utils/tools.ts"],"names":["delay","ms","Promise","resolve","setTimeout","timeoutPromise","promise","reject","timeoutId","Error","then","res","clearTimeout","err","getFormatTime","date","Date","getHours","getMinutes"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAgBC,EAAhB,EAA2C;AAC9C,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,CAACJ,EAAD,EAAaK,OAAb,KAC1B,IAAIJ,OAAJ,CAAY,CAACC,OAAD,EAAUI,MAAV,KAAqB;AAC7B,QAAMC,SAAS,GAAGJ,UAAU,CAAC,MAAM;AAC/BG,IAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,aAAV,CAAD,CAAN;AACH,GAF2B,EAEzBR,EAFyB,CAA5B;AAGAK,EAAAA,OAAO,CAACI,IAAR,CACKC,GAAD,IAAmB;AACfC,IAAAA,YAAY,CAACJ,SAAD,CAAZ;AACAL,IAAAA,OAAO,CAACQ,GAAD,CAAP;AACH,GAJL,EAKKE,GAAD,IAAgB;AACZD,IAAAA,YAAY,CAACJ,SAAD,CAAZ;AACAD,IAAAA,MAAM,CAACM,GAAD,CAAN;AACH,GARL;AAUH,CAdD,CADG;AAiBP;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBC,IAAU,GAAG,IAAIC,IAAJ,EAArC,EAAiD;AACpD,SAAQ,GAAED,IAAI,CAACE,QAAL,EAAgB,IAAGF,IAAI,CAACG,UAAL,KAAoB,EAApB,GAAyB,MAAMH,IAAI,CAACG,UAAL,EAA/B,GAAmDH,IAAI,CAACG,UAAL,EAAkB,EAAlG;AACH","sourcesContent":["/**\n * Delay current async function by given time\n * @param ms Delay time in microseconds\n */\nexport function delay (ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Create an promise with timeout\n * @param ms Timeout in millisecond\n * @param promise\n */\nexport const timeoutPromise = (ms: number, promise: Promise<any>): Promise<Response> =>\n    new Promise((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n            reject(new Error(\"API timeout\"));\n        }, ms);\n        promise.then(\n            (res: Response) => {\n                clearTimeout(timeoutId);\n                resolve(res);\n            },\n            (err: Error) => {\n                clearTimeout(timeoutId);\n                reject(err);\n            },\n        );\n    });\n\n/**\n * Get formated time for app clock\n */\nexport function getFormatTime (date: Date = new Date()) {\n    return `${date.getHours()}:${date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()}`;\n}\n"]},"metadata":{},"sourceType":"module"}