{"ast":null,"code":"import { API_SECURE_KEY, API_TIMEOUT } from '@config';\nimport { gDebug } from '@utils/log';\nimport { timeoutPromise } from '@utils/tools';\n\n/**\n * Fetch API from backend\n * @param url Path of api\n * @param opts\n */\nexport const commonFetch = async (url, opts) => {\n  gDebug.i(\"commonFetch\", `Calling url: ${url}`, opts);\n  const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n\n  try {\n    const response = await timeoutPromise(API_TIMEOUT, fetch(proxyUrl + url, { ...opts,\n      headers: { ...(opts === null || opts === void 0 ? void 0 : opts.headers),\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      body: (opts === null || opts === void 0 ? void 0 : opts.method) === \"GET\" ? undefined : JSON.stringify((opts === null || opts === void 0 ? void 0 : opts.body) || {})\n    }));\n    return await response.json();\n  } catch (e) {\n    gDebug.w(\"commonFetch\", `failed url: ${url}`, e);\n    throw new Error(\"API Call failed\");\n  }\n};\n/**\n * Fetch API with x-api-key header set\n * @param url Path of api\n * @param opts\n */\n\nexport const secureFetch = (url, opts) => commonFetch(url, { ...opts,\n  headers: {\n    \"x-api-key\": API_SECURE_KEY,\n    ...(opts === null || opts === void 0 ? void 0 : opts.headers)\n  }\n});","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebForEndUser/src/apis/index.ts"],"names":["API_SECURE_KEY","API_TIMEOUT","gDebug","timeoutPromise","commonFetch","url","opts","i","proxyUrl","response","fetch","headers","Accept","redirect","body","method","undefined","JSON","stringify","json","e","w","Error","secureFetch"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,SAA5C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,cAAT,QAA+B,cAA/B;;AAMA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,OAAOC,GAAP,EAAoBC,IAApB,KAA0D;AACjFJ,EAAAA,MAAM,CAACK,CAAP,CAAS,aAAT,EAAyB,gBAAeF,GAAI,EAA5C,EAA+CC,IAA/C;AACA,QAAME,QAAQ,GAAG,sCAAjB;;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,cAAc,CACjCF,WADiC,EAEjCS,KAAK,CAACF,QAAQ,GAAGH,GAAZ,EAAiB,EAClB,GAAGC,IADe;AAElBK,MAAAA,OAAO,EAAE,EACL,IAAGL,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEK,OAAT,CADK;AAELC,QAAAA,MAAM,EAAE,kBAFH;AAGL,wBAAgB;AAHX,OAFS;AAOlBC,MAAAA,QAAQ,EAAE,QAPQ;AAQlBC,MAAAA,IAAI,EAAE,CAAAR,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAES,MAAN,MAAiB,KAAjB,GAAyBC,SAAzB,GAAqCC,IAAI,CAACC,SAAL,CAAe,CAAAZ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEQ,IAAN,KAAc,EAA7B;AARzB,KAAjB,CAF4B,CAArC;AAaA,WAAO,MAAML,QAAQ,CAACU,IAAT,EAAb;AACH,GAfD,CAeE,OAAOC,CAAP,EAAU;AACRlB,IAAAA,MAAM,CAACmB,CAAP,CAAS,aAAT,EAAyB,eAAchB,GAAI,EAA3C,EAA8Ce,CAA9C;AACA,UAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AACH;AACJ,CAtBM;AAwBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAAClB,GAAD,EAAcC,IAAd,KACvBF,WAAW,CAACC,GAAD,EAAM,EACb,GAAGC,IADU;AAEbK,EAAAA,OAAO,EAAE;AAAE,iBAAaX,cAAf;AAA+B,QAAGM,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEK,OAAT;AAA/B;AAFI,CAAN,CADR","sourcesContent":["import { API_SECURE_KEY, API_TIMEOUT } from '@config';\nimport { gDebug } from '@utils/log';\nimport { timeoutPromise } from '@utils/tools';\n\ninterface IRequestInit extends RequestInit {\n    body?: any;\n}\n\n/**\n * Fetch API from backend\n * @param url Path of api\n * @param opts\n */\nexport const commonFetch = async (url: string, opts?: IRequestInit): Promise<any> => {\n    gDebug.i(\"commonFetch\", `Calling url: ${url}`, opts);\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n    try {\n        const response = await timeoutPromise(\n            API_TIMEOUT,\n            fetch(proxyUrl + url, {\n                ...opts,\n                headers: {\n                    ...opts?.headers,\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                redirect: \"follow\",\n                body: opts?.method === \"GET\" ? undefined : JSON.stringify(opts?.body || {}),\n            }),\n        );\n        return await response.json();\n    } catch (e) {\n        gDebug.w(\"commonFetch\", `failed url: ${url}`, e);\n        throw new Error(\"API Call failed\");\n    }\n};\n\n/**\n * Fetch API with x-api-key header set\n * @param url Path of api\n * @param opts\n */\nexport const secureFetch = (url: string, opts?: IRequestInit) =>\n    commonFetch(url, {\n        ...opts,\n        headers: { \"x-api-key\": API_SECURE_KEY, ...opts?.headers },\n    });\n"]},"metadata":{},"sourceType":"module"}