"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.find-index");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.array.some");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLastViewed = void 0;

var _react = require("react");

var _store = _interopRequireDefault(require("store2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var retrieveLastViewedStoryIds = function retrieveLastViewedStoryIds() {
  var items = _store["default"].get('lastViewedStoryIds');

  if (!items || !Array.isArray(items)) return [];
  if (!items.some(function (item) {
    return _typeof(item) === 'object' && item.storyId && item.refId;
  })) return [];
  return items;
};

var useLastViewed = function useLastViewed(selection) {
  var _useState = (0, _react.useState)(retrieveLastViewedStoryIds),
      _useState2 = _slicedToArray(_useState, 2),
      lastViewed = _useState2[0],
      setLastViewed = _useState2[1];

  var updateLastViewed = (0, _react.useCallback)(function (story) {
    return setLastViewed(function (state) {
      var index = state.findIndex(function (_ref) {
        var storyId = _ref.storyId,
            refId = _ref.refId;
        return storyId === story.storyId && refId === story.refId;
      });
      if (index === 0) return state;
      var update = index === -1 ? [story].concat(_toConsumableArray(state)) : [story].concat(_toConsumableArray(state.slice(0, index)), _toConsumableArray(state.slice(index + 1)));

      _store["default"].set('lastViewedStoryIds', update);

      return update;
    });
  }, []);
  var clearLastViewed = (0, _react.useCallback)(function () {
    var update = selection ? [selection] : [];
    setLastViewed(update);

    _store["default"].set('lastViewedStoryIds', update);
  }, [selection]);
  (0, _react.useEffect)(function () {
    if (selection) updateLastViewed(selection);
  }, [selection]);
  return {
    lastViewed: lastViewed,
    clearLastViewed: clearLastViewed
  };
};

exports.useLastViewed = useLastViewed;