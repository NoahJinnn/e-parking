{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\n// Languages\nimport { useTranslation } from '@languages/index';\n/**\n * Error page\n * @author: Giang Nguyen\n */\n\nvar ErrorPage = function ErrorPage(props) {\n  _s();\n\n  var statusCode = props.statusCode;\n\n  var _useTranslation = useTranslation(['common']),\n      t = _useTranslation.t;\n\n  return __jsx(\"div\", {\n    className: \"bases__container flex justify-center items-center\"\n  }, __jsx(\"p\", {\n    className: \"white\"\n  }, statusCode ? t('error-with-status', {\n    statusCode: statusCode\n  }) : t('error-without-status')));\n};\n\n_s(ErrorPage, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ErrorPage;\n\nErrorPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var res, err, statusCode;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res = _ref.res, err = _ref.err;\n            statusCode = null;\n\n            if (res) {\n              statusCode = res.statusCode;\n            } else if (err) {\n              statusCode = err.statusCode;\n            }\n\n            return _context.abrupt(\"return\", {\n              namespacesRequired: ['common'],\n              statusCode: statusCode\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default ErrorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ErrorPage\");","map":{"version":3,"sources":["/home/nguyen/workspace/projects/eparking/WebProfile/pages/_error.tsx"],"names":["React","useTranslation","ErrorPage","props","statusCode","t","getInitialProps","res","err","namespacesRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;AACA;AACA;AACA;;AAQA,IAAMC,SAAgC,GAAG,SAAnCA,SAAmC,CAACC,KAAD,EAAW;AAAA;;AAChD,MAAQC,UAAR,GAAuBD,KAAvB,CAAQC,UAAR;;AACA,wBAAcH,cAAc,CAAC,CAAC,QAAD,CAAD,CAA5B;AAAA,MAAQI,CAAR,mBAAQA,CAAR;;AACA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAG,IAAA,SAAS,EAAC;AAAb,KAAsBD,UAAU,GAAGC,CAAC,CAAC,mBAAD,EAAsB;AAAED,IAAAA,UAAU,EAAVA;AAAF,GAAtB,CAAJ,GAA4CC,CAAC,CAAC,sBAAD,CAA7E,CADJ,CADJ;AAKH,CARD;;GAAMH,S;UAEYD,c;;;KAFZC,S;;AAUNA,SAAS,CAACI,eAAV;AAAA,uEAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,QAASA,GAAT,EAAcC,GAAd,QAAcA,GAAd;AACpBJ,YAAAA,UADoB,GACP,IADO;;AAExB,gBAAIG,GAAJ,EAAS;AACFH,cAAAA,UADE,GACaG,GADb,CACFH,UADE;AAER,aAFD,MAEO,IAAII,GAAJ,EAAS;AACTJ,cAAAA,UADS,GACMI,GADN,CACTJ,UADS;AAEf;;AANuB,6CAOjB;AACHK,cAAAA,kBAAkB,EAAE,CAAC,QAAD,CADjB;AAEHL,cAAAA,UAAU,EAAVA;AAFG,aAPiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AAaA,eAAeF,SAAf","sourcesContent":["import React from 'react';\nimport { AppInitialProps } from 'next/app';\n\n// Languages\nimport { useTranslation } from '@languages/index';\n\n/**\n * Error page\n * @author: Giang Nguyen\n */\ninterface Props extends AppInitialProps {\n    statusCode: number;\n}\ninterface INextErrorPage<P = {}> extends React.FC<P> {\n    getInitialProps: ({ res, err }: any) => Promise<{ namespacesRequired: string[]; statusCode: number }>;\n}\n\nconst ErrorPage: INextErrorPage<Props> = (props) => {\n    const { statusCode } = props;\n    const { t } = useTranslation(['common']);\n    return (\n        <div className=\"bases__container flex justify-center items-center\">\n            <p className=\"white\">{statusCode ? t('error-with-status', { statusCode }) : t('error-without-status')}</p>\n        </div>\n    );\n};\n\nErrorPage.getInitialProps = async ({ res, err }: any) => {\n    let statusCode = null;\n    if (res) {\n        ({ statusCode } = res);\n    } else if (err) {\n        ({ statusCode } = err);\n    }\n    return {\n        namespacesRequired: ['common'],\n        statusCode,\n    };\n};\n\nexport default ErrorPage;\n"]},"metadata":{},"sourceType":"module"}