{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport smoothscroll from 'smoothscroll-polyfill';\n/**\n * Carousel\n * @author: Giang Nguyen\n */\n\nconst Carousel = props => {\n  // Constructor\n  const {\n    infinite,\n    index,\n    id,\n    children\n  } = props;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    slideIndex: index\n  });\n  const {\n    slideIndex\n  } = state; // useEffect as componentDidMount and componentWillUnmount\n\n  useEffect(() => {\n    smoothscroll.polyfill();\n    setTimeout(() => {\n      processSlide();\n    }, 10);\n    return () => {\n      processSlide('remove');\n    };\n  }, []);\n\n  const processSlide = (action = '') => {\n    const carousel = document.getElementById(`carousel_${id}`);\n\n    if (action == 'remove') {\n      carousel === null || carousel === void 0 ? void 0 : carousel.removeEventListener('scroll', () => {});\n    } else {\n      var _document$getElementB;\n\n      const children_length = React.Children.toArray(children).length; // Define previous or next slide\n\n      let prevIndex = slideIndex - 1;\n\n      if (slideIndex == 0) {\n        if (infinite) {\n          prevIndex = children_length - 1;\n        } else {\n          prevIndex = 0;\n        }\n      }\n\n      let nextIndex = slideIndex + 1;\n\n      if (slideIndex == children_length - 1) {\n        if (infinite) {\n          nextIndex = 0;\n        } else {\n          nextIndex = children_length - 1;\n        }\n      }\n\n      const slide_id = action == 'prev' ? `${id}${prevIndex}` : action == 'next' ? `${id}${nextIndex}` : `${id}${slideIndex}`;\n      let offsetLeft = (_document$getElementB = document.getElementById(slide_id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.offsetLeft; // Scroll to slide\n\n      carousel === null || carousel === void 0 ? void 0 : carousel.scrollTo({\n        left: offsetLeft ? offsetLeft : 0,\n        behavior: action ? 'smooth' : 'auto'\n      }); // Handle slide index\n\n      carousel === null || carousel === void 0 ? void 0 : carousel.addEventListener('scroll', () => {\n        let elements = document.querySelectorAll(`div.components__carousel-item.${id}`);\n\n        for (const i in elements) {\n          let element = elements[i];\n          const next_element = document.getElementById(`${id}${parseInt(i) + 1}`);\n\n          if (element instanceof HTMLElement) {\n            if (!next_element && carousel.scrollLeft >= element.offsetLeft - 100) {\n              setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                slideIndex: children_length - 1\n              }));\n            }\n\n            if (next_element && carousel.scrollLeft >= element.offsetLeft && carousel.scrollLeft <= next_element.offsetLeft) {\n              setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                slideIndex: parseInt(i)\n              }));\n            }\n          }\n        }\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"components__carousel\"\n  }, __jsx(\"div\", {\n    className: \"components__carousel-index pv2 ph3\"\n  }, slideIndex + 1, \" / \", React.Children.toArray(children).length), __jsx(\"div\", {\n    className: \"components__carousel-wrapper\",\n    id: `carousel_${id}`\n  }, __jsx(\"div\", {\n    className: \"flex\"\n  }, React.Children.map(children, (child, i) => __jsx(\"div\", {\n    className: `components__carousel-item ${id}`,\n    key: i,\n    id: `${id}${i}`\n  }, child)))), __jsx(\"div\", {\n    className: \"components__carousel-prev flex justify-center items-center\",\n    onClick: () => processSlide('prev')\n  }, __jsx(\"i\", {\n    className: \"fa fa-chevron-left\"\n  })), __jsx(\"div\", {\n    className: \"components__carousel-next flex justify-center items-center\",\n    onClick: () => processSlide('next')\n  }, __jsx(\"i\", {\n    className: \"fa fa-chevron-right\"\n  })));\n};\n\nCarousel.defaultProps = {\n  index: 0,\n  infinite: true\n};\nexport default Carousel;","map":null,"metadata":{},"sourceType":"module"}