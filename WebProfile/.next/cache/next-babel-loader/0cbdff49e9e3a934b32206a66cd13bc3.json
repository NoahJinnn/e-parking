{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Fragment, useState } from 'react';\nimport LazyImg from 'react-cool-img';\n/**\n * Image Lazyload\n * @author: Giang Nguyen\n */\n\nvar Img = function Img(props) {\n  // Constructor\n  var isBlur = props.isBlur,\n      placeholder = props.placeholder,\n      className = props.className,\n      src = props.src,\n      _onClick = props.onClick;\n\n  var _useState = useState([isBlur ? 'components__img-thumb' : '', className]),\n      classes = _useState[0],\n      setClasses = _useState[1];\n\n  var handleImageLoaded = function handleImageLoaded() {\n    if (isBlur) {\n      classes[0] = 'components__img-full';\n      setTimeout(function () {\n        setClasses(_toConsumableArray(classes));\n      }, 500);\n    }\n  };\n\n  var renderClass = function renderClass() {\n    var className = '';\n\n    var _iterator = _createForOfIteratorHelper(classes.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            item = _step$value[1];\n\n        className += item;\n\n        if (item && index < classes.length - 1) {\n          className += ' ';\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return className;\n  };\n\n  return __jsx(Fragment, null, __jsx(LazyImg, {\n    className: renderClass(),\n    placeholder: placeholder ? placeholder : src,\n    src: src,\n    onClick: function onClick() {\n      return _onClick();\n    },\n    onLoad: function onLoad() {\n      return handleImageLoaded();\n    },\n    debounce: 0,\n    alt: \"e-Parking\"\n  }), __jsx(\"noscript\", null, __jsx(\"img\", {\n    className: className,\n    src: src,\n    alt: \"e-Parking\"\n  })));\n};\n\nImg.defaultProps = {\n  isBlur: false,\n  placeholder: '',\n  className: '',\n  src: '',\n  onClick: function onClick() {}\n};\nexport default Img;","map":null,"metadata":{},"sourceType":"module"}